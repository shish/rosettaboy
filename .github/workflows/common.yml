name: Common

on:
  workflow_call:
    inputs:
      workdir:
        required: true
        type: string
      build-pkgs:
        required: false
        type: string
      format-pkgs:
        required: false
        type: string
      cache-key:
        required: false
        type: string
      cache-file:
        required: false
        type: string
      cache-paths:
        required: false
        type: string
      with-nim:
        required: false
        type: string
      with-zig:
        required: false
        type: string

jobs:
  format:
    name: Format
    runs-on: ubuntu-22.04
    if: "!contains(github.event.head_commit.message, '[skip format]')"
    steps:
    - name: Checkout
      uses: actions/checkout@v3
    - name: Set Up Cache
      if: inputs.cache-paths
      uses: actions/cache@v3
      with:
        path: ${{ inputs.cache-paths }}
        key: ${{ inputs.workdir }}-format-${{ inputs.cache-key }}${{ hashFiles(inputs.cache-file) }}
        restore-keys: ${{ inputs.workdir }}-format-
    - name: Install Pkgs
      uses: awalsh128/cache-apt-pkgs-action@v1.2.3
      with:
        packages: ${{ inputs.build-pkgs }}
        version: format-${{ inputs.workdir }}
    - name: Install Nim
      if: inputs.with-nim
      uses: jiro4989/setup-nim-action@v1
      with:
        nim-version: ${{ inputs.with-nim }}
    - name: Install Zig
      if: inputs.with-zig
      uses: goto-bus-stop/setup-zig@v2
      with:
        version: ${{ inputs.with-zig }}
    - name: Check
      working-directory: ${{ inputs.workdir }}
      shell: bash
      run: ./format.sh && git diff --exit-code

  build:
    name: Build
    runs-on: ubuntu-22.04
    if: "!contains(github.event.head_commit.message, '[skip build]')"
    steps:
    - name: Checkout
      uses: actions/checkout@v3
      with:
        submodules: recursive
    - name: Set Up Cache
      if: inputs.cache-paths
      uses: actions/cache@v3
      with:
        path: ${{ inputs.cache-paths }}
        key: ${{ inputs.workdir }}-build-${{ inputs.cache-key }}${{ hashFiles(inputs.cache-file) }}
        restore-keys: ${{ inputs.workdir }}-build-
    - name: Install Pkgs
      uses: awalsh128/cache-apt-pkgs-action@v1.2.3
      with:
        packages: ${{ inputs.build-pkgs }}
        version: build-${{ inputs.workdir }}
    - name: Install Nim
      if: inputs.with-nim
      uses: jiro4989/setup-nim-action@v1
      with:
        nim-version: ${{ inputs.with-nim }}
    - name: Install Zig
      if: inputs.with-zig
      uses: goto-bus-stop/setup-zig@v2
      with:
        version: ${{ inputs.with-zig }}
    - name: Build
      shell: bash
      run: ./${{ inputs.workdir }}/build.sh
    - name: Smoke Test
      shell: bash
      run: ./${{ inputs.workdir }}/rosettaboy-release --help
    - name: CPU Integration Tests
      shell: bash
      run: ./all.py blargg ${{ inputs.workdir }}
    - name: Benchmark Test
      shell: bash
      run: ./all.py bench ${{ inputs.workdir }} --default --frames 10

  nix:
    name: Nix
    runs-on: ubuntu-22.04
    if: ${{ !contains(github.event.head_commit.message, '[skip nix]') }}
    outputs:
      flake_status: ${{ steps.early.outputs.flake_status }}
      shell_status: ${{ steps.early.outputs.shell_status }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - id: early
        name: Check if nix files exist
        shell: bash
        working-directory: ${{ inputs.workdir }}
        run: |
          flake_status="skip"
          if [ -f "derivation.nix" ]; then
            flake_status="found"
          fi
          echo "flake_status=${flake_status}" >> "${GITHUB_OUTPUT}"

          shell_status="skip"
          if [ -f "shell.nix" ]; then
            shell_status="found"
          fi
          echo "shell_status=${shell_status}" >> "${GITHUB_OUTPUT}"

  nix-flake:
    name: Nix Flake
    runs-on: ubuntu-22.04
    needs: nix
    if: ${{ !contains(github.event.head_commit.message, '[skip nix flake]') && needs.nix.outputs.flake_status == 'found' }}
    steps:
    - name: Checkout
      uses: actions/checkout@v3
      with:
        submodules: recursive
    - name: Set Up Build Cache
      uses: actions/cache@v3
      id: nix-cache
      with:
        path: /tmp/nix-store.nar
        key: ${{ runner.os }}-${{ inputs.workdir }}-nix-store.nar-${{ hashFiles('flake.nix', 'flake.lock', format('{0}/derivation.nix', inputs.workdir)) }}
        restore-keys: ${{ runner.os }}-${{ inputs.workdir }}-nix-store.nar-
    - name: Install Deps
      uses: cachix/install-nix-action@v15
      with:
        nix_path: nixpkgs=channel:nixos-22.11
      # see: https://github.com/cachix/install-nix-action/issues/56#issuecomment-1300421537
    - name: "Import Nix Store Cache"
      if: "steps.nix-cache.outputs.cache-hit == 'true'"
      run: "nix-store --import < /tmp/nix-store.nar"
    - name: Flake Build
      shell: bash
      run: |
        nix eval .#packages --impure --raw \
            --apply '(import ./utils/get-builds-for-lang.nix { lang = "${{ inputs.workdir }}"; attr = "packages"; })' \
          | xargs nix build -L
    - name: Flake Run
      shell: bash
      run: |
        nix eval .#packages --impure --raw \
            --apply '(import ./utils/get-builds-for-lang.nix { lang = "${{ inputs.workdir }}"; prefix = ".#"; })' \
          | xargs -I{} nix run {} -- --help
    - name: Flake Shell
      shell: bash
      working-directory: ${{ inputs.workdir }}
      run: nix develop ..#${{ inputs.workdir }} --command bash -c './build.sh && ./rosettaboy-release --help'
    - name: Flake Checks
      shell: bash
      run: |
        nix eval .#checks --impure --raw \
            --apply '(import ./utils/get-builds-for-lang.nix { lang = "${{ inputs.workdir }}"; attr = "checks"; })' \
          | xargs nix build -L
    - name: "Export Nix Store Cache"
      shell: bash
      # we could add devShells here but it might fill the cache fast...
      run: |
        nix eval .#packages --impure --raw \
            --apply '(import ./utils/get-builds-for-lang.nix { lang = "${{ inputs.workdir }}"; attr = "packages"; })' \
          | xargs -I{} bash -c "nix eval --raw {}; echo" \
          | xargs nix-store -qR \
          | xargs nix-store --export > /tmp/nix-store.nar

  nix-shell:
    name: Nix Shell
    runs-on: ubuntu-22.04
    needs: nix
    if: ${{ !contains(github.event.head_commit.message, '[skip nix flake]') && needs.nix.outputs.shell_status == 'found' }}
    steps:
    - name: Checkout
      uses: actions/checkout@v3
      with:
        submodules: recursive
    - name: Install Nix
      uses: cachix/install-nix-action@v15
      with:
        nix_path: nixpkgs=channel:nixos-22.11
    - name: Run Shell
      shell: bash
      working-directory: ${{ inputs.workdir }}
      run: nix-shell --pure --run './build.sh && ./rosettaboy-release --help'
